
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000928  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abd  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b8  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5a  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000041c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_1>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_2>
   c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "HAL/LCD/LCD.h"
#include "MCAL/SPI/SPI_Interface.h"

int main(void)
{
	SPI_init();
  92:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_init>
	UART_init(9600);
  96:	60 e8       	ldi	r22, 0x80	; 128
  98:	75 e2       	ldi	r23, 0x25	; 37
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 cb 01 	call	0x396	; 0x396 <UART_init>
	
	
	while (1)
	{
		
		data = SPI_Transeive('B');
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	0e 94 29 01 	call	0x252	; 0x252 <SPI_Transeive>
		UART_Transmit(data);
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 42 02 	call	0x484	; 0x484 <UART_Transmit>
  ae:	f9 cf       	rjmp	.-14     	; 0xa2 <main+0x10>

000000b0 <DIO_vTogglePin>:
	}
}
	

void DIO_vTogglePin(uint8 Copy_u8PORT, uint8 Copy_u8PinNumber){
	switch(Copy_u8PORT)
  b0:	82 34       	cpi	r24, 0x42	; 66
  b2:	a1 f0       	breq	.+40     	; 0xdc <DIO_vTogglePin+0x2c>
  b4:	18 f4       	brcc	.+6      	; 0xbc <DIO_vTogglePin+0xc>
  b6:	81 34       	cpi	r24, 0x41	; 65
  b8:	31 f0       	breq	.+12     	; 0xc6 <DIO_vTogglePin+0x16>
  ba:	08 95       	ret
  bc:	83 34       	cpi	r24, 0x43	; 67
  be:	c9 f0       	breq	.+50     	; 0xf2 <DIO_vTogglePin+0x42>
  c0:	84 34       	cpi	r24, 0x44	; 68
  c2:	11 f1       	breq	.+68     	; 0x108 <DIO_vTogglePin+0x58>
  c4:	08 95       	ret
	{
		case PORT_A:
			togglebit(PORTA_BASE->Port, Copy_u8PinNumber);
  c6:	2b b3       	in	r18, 0x1b	; 27
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_vTogglePin+0x22>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_vTogglePin+0x1e>
  d6:	82 27       	eor	r24, r18
  d8:	8b bb       	out	0x1b, r24	; 27
			break;
  da:	08 95       	ret

		case PORT_B:
			togglebit(PORTB_BASE->Port, Copy_u8PinNumber);
  dc:	28 b3       	in	r18, 0x18	; 24
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_vTogglePin+0x38>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_vTogglePin+0x34>
  ec:	82 27       	eor	r24, r18
  ee:	88 bb       	out	0x18, r24	; 24
			break;
  f0:	08 95       	ret
			
		case PORT_C:
			togglebit(PORTC_BASE->Port, Copy_u8PinNumber);
  f2:	25 b3       	in	r18, 0x15	; 21
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_vTogglePin+0x4e>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_vTogglePin+0x4a>
 102:	82 27       	eor	r24, r18
 104:	85 bb       	out	0x15, r24	; 21
			break;
 106:	08 95       	ret
			
		case PORT_D:
			togglebit(PORTD_BASE->Port, Copy_u8PinNumber);
 108:	22 b3       	in	r18, 0x12	; 18
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_vTogglePin+0x64>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_vTogglePin+0x60>
 118:	82 27       	eor	r24, r18
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	08 95       	ret

0000011e <__vector_1>:
	INT1_callback = callback1;
	INT2_callback = callback2;
}

//interrupt service routine for INT0
ISR(EXT_INT_0){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	if(INT0_callback != NULL)
 140:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_callback>
 144:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_callback+0x1>
 148:	30 97       	sbiw	r30, 0x00	; 0
 14a:	09 f0       	breq	.+2      	; 0x14e <__vector_1+0x30>
		INT0_callback();
 14c:	09 95       	icall
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_2>:

//interrupt service routine for INT1
ISR(EXT_INT_1){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	if(INT1_callback != NULL)
 192:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_callback>
 196:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_callback+0x1>
 19a:	30 97       	sbiw	r30, 0x00	; 0
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__vector_2+0x30>
		INT1_callback();
 19e:	09 95       	icall
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_3>:

//interrupt service routine for INT2
ISR(EXT_INT_2){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if(INT2_callback != NULL)
 1e4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	30 97       	sbiw	r30, 0x00	; 0
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <__vector_3+0x30>
		INT2_callback();
 1f0:	09 95       	icall
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <SPI_init>:
		setbit(SPCR,MSTR);//enable as master
		#endif

		#if SPI_MODE == SLAVE
		//set pins directions
		clearbit(DDRB,MOSI);
 214:	87 b3       	in	r24, 0x17	; 23
 216:	8f 7d       	andi	r24, 0xDF	; 223
 218:	87 bb       	out	0x17, r24	; 23
		clearbit(DDRB,SCK);
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	87 bb       	out	0x17, r24	; 23
		clearbit(DDRB,SS);
 220:	87 b3       	in	r24, 0x17	; 23
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	87 bb       	out	0x17, r24	; 23
		setbit(DDRB,MISO);
 226:	87 b3       	in	r24, 0x17	; 23
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	87 bb       	out	0x17, r24	; 23

		//enable SPI
		setbit(SPCR,SPE);
 22c:	8d b1       	in	r24, 0x0d	; 13
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	8d b9       	out	0x0d, r24	; 13

		//set interrupt configs
		if(SPI_INT == SP_EN) setbit(SPCR,SPIE);
		else if(SPI_INT == SP_DIS) clearbit(SPCR,SPIE);
 232:	8d b1       	in	r24, 0x0d	; 13
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	8d b9       	out	0x0d, r24	; 13

		//set data order configs
		if(DATA_ORDER == MSB_FIRST) clearbit(SPCR,DORD);
		else if(DATA_ORDER == LSB_FIRST) setbit(SPCR,DORD);
 238:	8d b1       	in	r24, 0x0d	; 13
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8d b9       	out	0x0d, r24	; 13

		//set phase and polarity configs
		clearbit(SPCR,CPOL);
 23e:	8d b1       	in	r24, 0x0d	; 13
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	8d b9       	out	0x0d, r24	; 13
		clearbit(SPCR,CPHA);
 244:	8d b1       	in	r24, 0x0d	; 13
 246:	8b 7f       	andi	r24, 0xFB	; 251
 248:	8d b9       	out	0x0d, r24	; 13

		clearbit(SPCR,MSTR);//enable as slave
 24a:	8d b1       	in	r24, 0x0d	; 13
 24c:	8f 7e       	andi	r24, 0xEF	; 239
 24e:	8d b9       	out	0x0d, r24	; 13
 250:	08 95       	ret

00000252 <SPI_Transeive>:
		setbit(PORTB,SS);
		return SPDR;
		#endif

		#if SPI_MODE == SLAVE
		SPDR = data;
 252:	8f b9       	out	0x0f, r24	; 15
		while(getbit(SPSR,SPIF)==0);
 254:	77 9b       	sbis	0x0e, 7	; 14
 256:	fe cf       	rjmp	.-4      	; 0x254 <SPI_Transeive+0x2>
		setbit(PORTB,SS);
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	88 bb       	out	0x18, r24	; 24
		#endif
 25e:	08 95       	ret

00000260 <is_normalMode>:
		return ((getbit(UCSRB,RXB8)<<8) | UDR);
	}
	else return UDR;
}

void UART_Set_Receive_Buffer(uint16 *RX_Buffer){
 260:	8f 92       	push	r8
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	74 e2       	ldi	r23, 0x24	; 36
 2a8:	84 e7       	ldi	r24, 0x74	; 116
 2aa:	9b e4       	ldi	r25, 0x4B	; 75
 2ac:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__subsf3>
 2bc:	4b 01       	movw	r8, r22
 2be:	5c 01       	movw	r10, r24
 2c0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 2cc:	9b 01       	movw	r18, r22
 2ce:	ac 01       	movw	r20, r24
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__subsf3>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	5f e3       	ldi	r21, 0x3F	; 63
 2e0:	0e 94 31 04 	call	0x862	; 0x862 <__gesf2>
 2e4:	88 23       	and	r24, r24
 2e6:	54 f0       	brlt	.+20     	; 0x2fc <is_normalMode+0x9c>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e8       	ldi	r20, 0x80	; 128
 2ee:	5f e3       	ldi	r21, 0x3F	; 63
 2f0:	c5 01       	movw	r24, r10
 2f2:	b4 01       	movw	r22, r8
 2f4:	0e 94 6d 02 	call	0x4da	; 0x4da <__addsf3>
 2f8:	4b 01       	movw	r8, r22
 2fa:	5c 01       	movw	r10, r24
 2fc:	c5 01       	movw	r24, r10
 2fe:	b4 01       	movw	r22, r8
 300:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 304:	6f 5f       	subi	r22, 0xFF	; 255
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	62 95       	swap	r22
 30a:	72 95       	swap	r23
 30c:	70 7f       	andi	r23, 0xF0	; 240
 30e:	76 27       	eor	r23, r22
 310:	60 7f       	andi	r22, 0xF0	; 240
 312:	76 27       	eor	r23, r22
 314:	9b 01       	movw	r18, r22
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	74 e2       	ldi	r23, 0x24	; 36
 31e:	84 ef       	ldi	r24, 0xF4	; 244
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 36 04 	call	0x86c	; 0x86c <__udivmodsi4>
 326:	ca 01       	movw	r24, r20
 328:	b9 01       	movw	r22, r18
 32a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 32e:	4b 01       	movw	r8, r22
 330:	5c 01       	movw	r10, r24
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	c5 01       	movw	r24, r10
 340:	b4 01       	movw	r22, r8
 342:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e8       	ldi	r20, 0x80	; 128
 34c:	5f e3       	ldi	r21, 0x3F	; 63
 34e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__subsf3>
 352:	6b 01       	movw	r12, r22
 354:	7c 01       	movw	r14, r24
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	37 ed       	ldi	r19, 0xD7	; 215
 35a:	43 e2       	ldi	r20, 0x23	; 35
 35c:	5c e3       	ldi	r21, 0x3C	; 60
 35e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__cmpsf2>
 362:	18 16       	cp	r1, r24
 364:	64 f0       	brlt	.+24     	; 0x37e <is_normalMode+0x11e>
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	37 ed       	ldi	r19, 0xD7	; 215
 36a:	43 e2       	ldi	r20, 0x23	; 35
 36c:	5c eb       	ldi	r21, 0xBC	; 188
 36e:	c7 01       	movw	r24, r14
 370:	b6 01       	movw	r22, r12
 372:	0e 94 31 04 	call	0x862	; 0x862 <__gesf2>
 376:	88 23       	and	r24, r24
 378:	24 f4       	brge	.+8      	; 0x382 <is_normalMode+0x122>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	03 c0       	rjmp	.+6      	; 0x384 <is_normalMode+0x124>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	01 c0       	rjmp	.+2      	; 0x384 <is_normalMode+0x124>
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	8f 90       	pop	r8
 394:	08 95       	ret

00000396 <UART_init>:
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
 3a2:	0e 94 30 01 	call	0x260	; 0x260 <is_normalMode>
 3a6:	88 23       	and	r24, r24
 3a8:	51 f1       	breq	.+84     	; 0x3fe <UART_init+0x68>
 3aa:	8b b1       	in	r24, 0x0b	; 11
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	8b b9       	out	0x0b, r24	; 11
 3b0:	d7 01       	movw	r26, r14
 3b2:	c6 01       	movw	r24, r12
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	bc 01       	movw	r22, r24
 3c6:	cd 01       	movw	r24, r26
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 3dc:	9b 01       	movw	r18, r22
 3de:	ac 01       	movw	r20, r24
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	74 e2       	ldi	r23, 0x24	; 36
 3e4:	84 e7       	ldi	r24, 0x74	; 116
 3e6:	9b e4       	ldi	r25, 0x4B	; 75
 3e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e8       	ldi	r20, 0x80	; 128
 3f2:	5f e3       	ldi	r21, 0x3F	; 63
 3f4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__subsf3>
 3f8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 3fc:	25 c0       	rjmp	.+74     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	82 60       	ori	r24, 0x02	; 2
 402:	8b b9       	out	0x0b, r24	; 11
 404:	d7 01       	movw	r26, r14
 406:	c6 01       	movw	r24, r12
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 428:	9b 01       	movw	r18, r22
 42a:	ac 01       	movw	r20, r24
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	74 e2       	ldi	r23, 0x24	; 36
 430:	84 e7       	ldi	r24, 0x74	; 116
 432:	9b e4       	ldi	r25, 0x4B	; 75
 434:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e8       	ldi	r20, 0x80	; 128
 43e:	5f e3       	ldi	r21, 0x3F	; 63
 440:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__subsf3>
 444:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 448:	70 bd       	out	0x20, r23	; 32
 44a:	69 b9       	out	0x09, r22	; 9
 44c:	8f b7       	in	r24, 0x3f	; 63
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	8f bf       	out	0x3f, r24	; 63
 452:	8a b1       	in	r24, 0x0a	; 10
 454:	80 68       	ori	r24, 0x80	; 128
 456:	8a b9       	out	0x0a, r24	; 10
 458:	8a b1       	in	r24, 0x0a	; 10
 45a:	8f 7b       	andi	r24, 0xBF	; 191
 45c:	8a b9       	out	0x0a, r24	; 10
 45e:	8a b1       	in	r24, 0x0a	; 10
 460:	8f 7d       	andi	r24, 0xDF	; 223
 462:	8a b9       	out	0x0a, r24	; 10
 464:	8a b1       	in	r24, 0x0a	; 10
 466:	8b 7f       	andi	r24, 0xFB	; 251
 468:	8a b9       	out	0x0a, r24	; 10
 46a:	8a b1       	in	r24, 0x0a	; 10
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	8a b9       	out	0x0a, r24	; 10
 470:	8a b1       	in	r24, 0x0a	; 10
 472:	80 61       	ori	r24, 0x10	; 16
 474:	8a b9       	out	0x0a, r24	; 10
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	80 bd       	out	0x20, r24	; 32
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	08 95       	ret

00000484 <UART_Transmit>:
 484:	5d 9b       	sbis	0x0b, 5	; 11
 486:	fe cf       	rjmp	.-4      	; 0x484 <UART_Transmit>
 488:	8c b9       	out	0x0c, r24	; 12
 48a:	08 95       	ret

0000048c <__vector_13>:
	UART_RX_INT_Buffer = RX_Buffer;
}


ISR(UART_RX_INT){
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	/*if(UARTConfig.CHAR_SIZE == SIZE_9){
		*UART_RX_INT_Buffer = ((getbit(UCSRB,RXB8)<<8) | UDR);
	}
	else *UART_RX_INT_Buffer = UDR;*/
	DIO_vTogglePin(PORT_C,PIN5);
 4ae:	65 e0       	ldi	r22, 0x05	; 5
 4b0:	83 e4       	ldi	r24, 0x43	; 67
 4b2:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_vTogglePin>
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__subsf3>:
 4d8:	50 58       	subi	r21, 0x80	; 128

000004da <__addsf3>:
 4da:	bb 27       	eor	r27, r27
 4dc:	aa 27       	eor	r26, r26
 4de:	0e 94 84 02 	call	0x508	; 0x508 <__addsf3x>
 4e2:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_round>
 4e6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_pscA>
 4ea:	38 f0       	brcs	.+14     	; 0x4fa <__addsf3+0x20>
 4ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fp_pscB>
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__addsf3+0x20>
 4f2:	39 f4       	brne	.+14     	; 0x502 <__addsf3+0x28>
 4f4:	9f 3f       	cpi	r25, 0xFF	; 255
 4f6:	19 f4       	brne	.+6      	; 0x4fe <__addsf3+0x24>
 4f8:	26 f4       	brtc	.+8      	; 0x502 <__addsf3+0x28>
 4fa:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_nan>
 4fe:	0e f4       	brtc	.+2      	; 0x502 <__addsf3+0x28>
 500:	e0 95       	com	r30
 502:	e7 fb       	bst	r30, 7
 504:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_inf>

00000508 <__addsf3x>:
 508:	e9 2f       	mov	r30, r25
 50a:	0e 94 08 04 	call	0x810	; 0x810 <__fp_split3>
 50e:	58 f3       	brcs	.-42     	; 0x4e6 <__addsf3+0xc>
 510:	ba 17       	cp	r27, r26
 512:	62 07       	cpc	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	95 07       	cpc	r25, r21
 51a:	20 f0       	brcs	.+8      	; 0x524 <__addsf3x+0x1c>
 51c:	79 f4       	brne	.+30     	; 0x53c <__addsf3x+0x34>
 51e:	a6 f5       	brtc	.+104    	; 0x588 <__addsf3x+0x80>
 520:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_zero>
 524:	0e f4       	brtc	.+2      	; 0x528 <__addsf3x+0x20>
 526:	e0 95       	com	r30
 528:	0b 2e       	mov	r0, r27
 52a:	ba 2f       	mov	r27, r26
 52c:	a0 2d       	mov	r26, r0
 52e:	0b 01       	movw	r0, r22
 530:	b9 01       	movw	r22, r18
 532:	90 01       	movw	r18, r0
 534:	0c 01       	movw	r0, r24
 536:	ca 01       	movw	r24, r20
 538:	a0 01       	movw	r20, r0
 53a:	11 24       	eor	r1, r1
 53c:	ff 27       	eor	r31, r31
 53e:	59 1b       	sub	r21, r25
 540:	99 f0       	breq	.+38     	; 0x568 <__addsf3x+0x60>
 542:	59 3f       	cpi	r21, 0xF9	; 249
 544:	50 f4       	brcc	.+20     	; 0x55a <__addsf3x+0x52>
 546:	50 3e       	cpi	r21, 0xE0	; 224
 548:	68 f1       	brcs	.+90     	; 0x5a4 <__addsf3x+0x9c>
 54a:	1a 16       	cp	r1, r26
 54c:	f0 40       	sbci	r31, 0x00	; 0
 54e:	a2 2f       	mov	r26, r18
 550:	23 2f       	mov	r18, r19
 552:	34 2f       	mov	r19, r20
 554:	44 27       	eor	r20, r20
 556:	58 5f       	subi	r21, 0xF8	; 248
 558:	f3 cf       	rjmp	.-26     	; 0x540 <__addsf3x+0x38>
 55a:	46 95       	lsr	r20
 55c:	37 95       	ror	r19
 55e:	27 95       	ror	r18
 560:	a7 95       	ror	r26
 562:	f0 40       	sbci	r31, 0x00	; 0
 564:	53 95       	inc	r21
 566:	c9 f7       	brne	.-14     	; 0x55a <__addsf3x+0x52>
 568:	7e f4       	brtc	.+30     	; 0x588 <__addsf3x+0x80>
 56a:	1f 16       	cp	r1, r31
 56c:	ba 0b       	sbc	r27, r26
 56e:	62 0b       	sbc	r22, r18
 570:	73 0b       	sbc	r23, r19
 572:	84 0b       	sbc	r24, r20
 574:	ba f0       	brmi	.+46     	; 0x5a4 <__addsf3x+0x9c>
 576:	91 50       	subi	r25, 0x01	; 1
 578:	a1 f0       	breq	.+40     	; 0x5a2 <__addsf3x+0x9a>
 57a:	ff 0f       	add	r31, r31
 57c:	bb 1f       	adc	r27, r27
 57e:	66 1f       	adc	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	c2 f7       	brpl	.-16     	; 0x576 <__addsf3x+0x6e>
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <__addsf3x+0x9c>
 588:	ba 0f       	add	r27, r26
 58a:	62 1f       	adc	r22, r18
 58c:	73 1f       	adc	r23, r19
 58e:	84 1f       	adc	r24, r20
 590:	48 f4       	brcc	.+18     	; 0x5a4 <__addsf3x+0x9c>
 592:	87 95       	ror	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f7 95       	ror	r31
 59c:	9e 3f       	cpi	r25, 0xFE	; 254
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <__addsf3x+0x9a>
 5a0:	b0 cf       	rjmp	.-160    	; 0x502 <__addsf3+0x28>
 5a2:	93 95       	inc	r25
 5a4:	88 0f       	add	r24, r24
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <__addsf3x+0xa2>
 5a8:	99 27       	eor	r25, r25
 5aa:	ee 0f       	add	r30, r30
 5ac:	97 95       	ror	r25
 5ae:	87 95       	ror	r24
 5b0:	08 95       	ret

000005b2 <__cmpsf2>:
 5b2:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_cmp>
 5b6:	08 f4       	brcc	.+2      	; 0x5ba <__cmpsf2+0x8>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	08 95       	ret

000005bc <__divsf3>:
 5bc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__divsf3x>
 5c0:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_round>
 5c4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fp_pscB>
 5c8:	58 f0       	brcs	.+22     	; 0x5e0 <__divsf3+0x24>
 5ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_pscA>
 5ce:	40 f0       	brcs	.+16     	; 0x5e0 <__divsf3+0x24>
 5d0:	29 f4       	brne	.+10     	; 0x5dc <__divsf3+0x20>
 5d2:	5f 3f       	cpi	r21, 0xFF	; 255
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <__divsf3+0x24>
 5d6:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_inf>
 5da:	51 11       	cpse	r21, r1
 5dc:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_szero>
 5e0:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_nan>

000005e4 <__divsf3x>:
 5e4:	0e 94 08 04 	call	0x810	; 0x810 <__fp_split3>
 5e8:	68 f3       	brcs	.-38     	; 0x5c4 <__divsf3+0x8>

000005ea <__divsf3_pse>:
 5ea:	99 23       	and	r25, r25
 5ec:	b1 f3       	breq	.-20     	; 0x5da <__divsf3+0x1e>
 5ee:	55 23       	and	r21, r21
 5f0:	91 f3       	breq	.-28     	; 0x5d6 <__divsf3+0x1a>
 5f2:	95 1b       	sub	r25, r21
 5f4:	55 0b       	sbc	r21, r21
 5f6:	bb 27       	eor	r27, r27
 5f8:	aa 27       	eor	r26, r26
 5fa:	62 17       	cp	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	38 f0       	brcs	.+14     	; 0x610 <__divsf3_pse+0x26>
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	44 1f       	adc	r20, r20
 60c:	aa 1f       	adc	r26, r26
 60e:	a9 f3       	breq	.-22     	; 0x5fa <__divsf3_pse+0x10>
 610:	35 d0       	rcall	.+106    	; 0x67c <__divsf3_pse+0x92>
 612:	0e 2e       	mov	r0, r30
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x3a>
 616:	e0 e8       	ldi	r30, 0x80	; 128
 618:	32 d0       	rcall	.+100    	; 0x67e <__divsf3_pse+0x94>
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	50 40       	sbci	r21, 0x00	; 0
 61e:	e6 95       	lsr	r30
 620:	00 1c       	adc	r0, r0
 622:	ca f7       	brpl	.-14     	; 0x616 <__divsf3_pse+0x2c>
 624:	2b d0       	rcall	.+86     	; 0x67c <__divsf3_pse+0x92>
 626:	fe 2f       	mov	r31, r30
 628:	29 d0       	rcall	.+82     	; 0x67c <__divsf3_pse+0x92>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	bb 1f       	adc	r27, r27
 632:	26 17       	cp	r18, r22
 634:	37 07       	cpc	r19, r23
 636:	48 07       	cpc	r20, r24
 638:	ab 07       	cpc	r26, r27
 63a:	b0 e8       	ldi	r27, 0x80	; 128
 63c:	09 f0       	breq	.+2      	; 0x640 <__divsf3_pse+0x56>
 63e:	bb 0b       	sbc	r27, r27
 640:	80 2d       	mov	r24, r0
 642:	bf 01       	movw	r22, r30
 644:	ff 27       	eor	r31, r31
 646:	93 58       	subi	r25, 0x83	; 131
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	3a f0       	brmi	.+14     	; 0x65a <__divsf3_pse+0x70>
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	51 05       	cpc	r21, r1
 650:	78 f0       	brcs	.+30     	; 0x670 <__divsf3_pse+0x86>
 652:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_inf>
 656:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	e4 f3       	brlt	.-8      	; 0x656 <__divsf3_pse+0x6c>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	d4 f3       	brlt	.-12     	; 0x656 <__divsf3_pse+0x6c>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c9 f7       	brne	.-14     	; 0x662 <__divsf3_pse+0x78>
 670:	88 0f       	add	r24, r24
 672:	91 1d       	adc	r25, r1
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret
 67c:	e1 e0       	ldi	r30, 0x01	; 1
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	bb 1f       	adc	r27, r27
 686:	62 17       	cp	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	ba 07       	cpc	r27, r26
 68e:	20 f0       	brcs	.+8      	; 0x698 <__divsf3_pse+0xae>
 690:	62 1b       	sub	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	ba 0b       	sbc	r27, r26
 698:	ee 1f       	adc	r30, r30
 69a:	88 f7       	brcc	.-30     	; 0x67e <__divsf3_pse+0x94>
 69c:	e0 95       	com	r30
 69e:	08 95       	ret

000006a0 <__fixunssfsi>:
 6a0:	0e 94 10 04 	call	0x820	; 0x820 <__fp_splitA>
 6a4:	88 f0       	brcs	.+34     	; 0x6c8 <__fixunssfsi+0x28>
 6a6:	9f 57       	subi	r25, 0x7F	; 127
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <__fixunssfsi+0x30>
 6aa:	b9 2f       	mov	r27, r25
 6ac:	99 27       	eor	r25, r25
 6ae:	b7 51       	subi	r27, 0x17	; 23
 6b0:	b0 f0       	brcs	.+44     	; 0x6de <__fixunssfsi+0x3e>
 6b2:	e1 f0       	breq	.+56     	; 0x6ec <__fixunssfsi+0x4c>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	1a f0       	brmi	.+6      	; 0x6c4 <__fixunssfsi+0x24>
 6be:	ba 95       	dec	r27
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__fixunssfsi+0x14>
 6c2:	14 c0       	rjmp	.+40     	; 0x6ec <__fixunssfsi+0x4c>
 6c4:	b1 30       	cpi	r27, 0x01	; 1
 6c6:	91 f0       	breq	.+36     	; 0x6ec <__fixunssfsi+0x4c>
 6c8:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_zero>
 6cc:	b1 e0       	ldi	r27, 0x01	; 1
 6ce:	08 95       	ret
 6d0:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_zero>
 6d4:	67 2f       	mov	r22, r23
 6d6:	78 2f       	mov	r23, r24
 6d8:	88 27       	eor	r24, r24
 6da:	b8 5f       	subi	r27, 0xF8	; 248
 6dc:	39 f0       	breq	.+14     	; 0x6ec <__fixunssfsi+0x4c>
 6de:	b9 3f       	cpi	r27, 0xF9	; 249
 6e0:	cc f3       	brlt	.-14     	; 0x6d4 <__fixunssfsi+0x34>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b3 95       	inc	r27
 6ea:	d9 f7       	brne	.-10     	; 0x6e2 <__fixunssfsi+0x42>
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__fixunssfsi+0x5c>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__floatunsisf>:
 6fe:	e8 94       	clt
 700:	09 c0       	rjmp	.+18     	; 0x714 <__floatsisf+0x12>

00000702 <__floatsisf>:
 702:	97 fb       	bst	r25, 7
 704:	3e f4       	brtc	.+14     	; 0x714 <__floatsisf+0x12>
 706:	90 95       	com	r25
 708:	80 95       	com	r24
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	99 23       	and	r25, r25
 716:	a9 f0       	breq	.+42     	; 0x742 <__floatsisf+0x40>
 718:	f9 2f       	mov	r31, r25
 71a:	96 e9       	ldi	r25, 0x96	; 150
 71c:	bb 27       	eor	r27, r27
 71e:	93 95       	inc	r25
 720:	f6 95       	lsr	r31
 722:	87 95       	ror	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	b7 95       	ror	r27
 72a:	f1 11       	cpse	r31, r1
 72c:	f8 cf       	rjmp	.-16     	; 0x71e <__floatsisf+0x1c>
 72e:	fa f4       	brpl	.+62     	; 0x76e <__floatsisf+0x6c>
 730:	bb 0f       	add	r27, r27
 732:	11 f4       	brne	.+4      	; 0x738 <__floatsisf+0x36>
 734:	60 ff       	sbrs	r22, 0
 736:	1b c0       	rjmp	.+54     	; 0x76e <__floatsisf+0x6c>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	16 c0       	rjmp	.+44     	; 0x76e <__floatsisf+0x6c>
 742:	88 23       	and	r24, r24
 744:	11 f0       	breq	.+4      	; 0x74a <__floatsisf+0x48>
 746:	96 e9       	ldi	r25, 0x96	; 150
 748:	11 c0       	rjmp	.+34     	; 0x76c <__floatsisf+0x6a>
 74a:	77 23       	and	r23, r23
 74c:	21 f0       	breq	.+8      	; 0x756 <__floatsisf+0x54>
 74e:	9e e8       	ldi	r25, 0x8E	; 142
 750:	87 2f       	mov	r24, r23
 752:	76 2f       	mov	r23, r22
 754:	05 c0       	rjmp	.+10     	; 0x760 <__floatsisf+0x5e>
 756:	66 23       	and	r22, r22
 758:	71 f0       	breq	.+28     	; 0x776 <__floatsisf+0x74>
 75a:	96 e8       	ldi	r25, 0x86	; 134
 75c:	86 2f       	mov	r24, r22
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	2a f0       	brmi	.+10     	; 0x76e <__floatsisf+0x6c>
 764:	9a 95       	dec	r25
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	da f7       	brpl	.-10     	; 0x764 <__floatsisf+0x62>
 76e:	88 0f       	add	r24, r24
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret

00000778 <__fp_cmp>:
 778:	99 0f       	add	r25, r25
 77a:	00 08       	sbc	r0, r0
 77c:	55 0f       	add	r21, r21
 77e:	aa 0b       	sbc	r26, r26
 780:	e0 e8       	ldi	r30, 0x80	; 128
 782:	fe ef       	ldi	r31, 0xFE	; 254
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	e8 07       	cpc	r30, r24
 78a:	f9 07       	cpc	r31, r25
 78c:	c0 f0       	brcs	.+48     	; 0x7be <__fp_cmp+0x46>
 78e:	12 16       	cp	r1, r18
 790:	13 06       	cpc	r1, r19
 792:	e4 07       	cpc	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	98 f0       	brcs	.+38     	; 0x7be <__fp_cmp+0x46>
 798:	62 1b       	sub	r22, r18
 79a:	73 0b       	sbc	r23, r19
 79c:	84 0b       	sbc	r24, r20
 79e:	95 0b       	sbc	r25, r21
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <__fp_cmp+0x38>
 7a2:	0a 26       	eor	r0, r26
 7a4:	61 f0       	breq	.+24     	; 0x7be <__fp_cmp+0x46>
 7a6:	23 2b       	or	r18, r19
 7a8:	24 2b       	or	r18, r20
 7aa:	25 2b       	or	r18, r21
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <__fp_cmp+0x3e>
 7ae:	08 95       	ret
 7b0:	0a 26       	eor	r0, r26
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <__fp_cmp+0x3e>
 7b4:	a1 40       	sbci	r26, 0x01	; 1
 7b6:	a6 95       	lsr	r26
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	81 1d       	adc	r24, r1
 7bc:	81 1d       	adc	r24, r1
 7be:	08 95       	ret

000007c0 <__fp_inf>:
 7c0:	97 f9       	bld	r25, 7
 7c2:	9f 67       	ori	r25, 0x7F	; 127
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	08 95       	ret

000007cc <__fp_nan>:
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	80 ec       	ldi	r24, 0xC0	; 192
 7d0:	08 95       	ret

000007d2 <__fp_pscA>:
 7d2:	00 24       	eor	r0, r0
 7d4:	0a 94       	dec	r0
 7d6:	16 16       	cp	r1, r22
 7d8:	17 06       	cpc	r1, r23
 7da:	18 06       	cpc	r1, r24
 7dc:	09 06       	cpc	r0, r25
 7de:	08 95       	ret

000007e0 <__fp_pscB>:
 7e0:	00 24       	eor	r0, r0
 7e2:	0a 94       	dec	r0
 7e4:	12 16       	cp	r1, r18
 7e6:	13 06       	cpc	r1, r19
 7e8:	14 06       	cpc	r1, r20
 7ea:	05 06       	cpc	r0, r21
 7ec:	08 95       	ret

000007ee <__fp_round>:
 7ee:	09 2e       	mov	r0, r25
 7f0:	03 94       	inc	r0
 7f2:	00 0c       	add	r0, r0
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__fp_round+0xc>
 7f6:	88 23       	and	r24, r24
 7f8:	52 f0       	brmi	.+20     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fa:	bb 0f       	add	r27, r27
 7fc:	40 f4       	brcc	.+16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fe:	bf 2b       	or	r27, r31
 800:	11 f4       	brne	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	60 ff       	sbrs	r22, 0
 804:	04 c0       	rjmp	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	6f 5f       	subi	r22, 0xFF	; 255
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__fp_split3>:
 810:	57 fd       	sbrc	r21, 7
 812:	90 58       	subi	r25, 0x80	; 128
 814:	44 0f       	add	r20, r20
 816:	55 1f       	adc	r21, r21
 818:	59 f0       	breq	.+22     	; 0x830 <__fp_splitA+0x10>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	71 f0       	breq	.+28     	; 0x83a <__fp_splitA+0x1a>
 81e:	47 95       	ror	r20

00000820 <__fp_splitA>:
 820:	88 0f       	add	r24, r24
 822:	97 fb       	bst	r25, 7
 824:	99 1f       	adc	r25, r25
 826:	61 f0       	breq	.+24     	; 0x840 <__fp_splitA+0x20>
 828:	9f 3f       	cpi	r25, 0xFF	; 255
 82a:	79 f0       	breq	.+30     	; 0x84a <__fp_splitA+0x2a>
 82c:	87 95       	ror	r24
 82e:	08 95       	ret
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	55 1f       	adc	r21, r21
 838:	f2 cf       	rjmp	.-28     	; 0x81e <__fp_split3+0xe>
 83a:	46 95       	lsr	r20
 83c:	f1 df       	rcall	.-30     	; 0x820 <__fp_splitA>
 83e:	08 c0       	rjmp	.+16     	; 0x850 <__fp_splitA+0x30>
 840:	16 16       	cp	r1, r22
 842:	17 06       	cpc	r1, r23
 844:	18 06       	cpc	r1, r24
 846:	99 1f       	adc	r25, r25
 848:	f1 cf       	rjmp	.-30     	; 0x82c <__fp_splitA+0xc>
 84a:	86 95       	lsr	r24
 84c:	71 05       	cpc	r23, r1
 84e:	61 05       	cpc	r22, r1
 850:	08 94       	sec
 852:	08 95       	ret

00000854 <__fp_zero>:
 854:	e8 94       	clt

00000856 <__fp_szero>:
 856:	bb 27       	eor	r27, r27
 858:	66 27       	eor	r22, r22
 85a:	77 27       	eor	r23, r23
 85c:	cb 01       	movw	r24, r22
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret

00000862 <__gesf2>:
 862:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_cmp>
 866:	08 f4       	brcc	.+2      	; 0x86a <__gesf2+0x8>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	08 95       	ret

0000086c <__udivmodsi4>:
 86c:	a1 e2       	ldi	r26, 0x21	; 33
 86e:	1a 2e       	mov	r1, r26
 870:	aa 1b       	sub	r26, r26
 872:	bb 1b       	sub	r27, r27
 874:	fd 01       	movw	r30, r26
 876:	0d c0       	rjmp	.+26     	; 0x892 <__udivmodsi4_ep>

00000878 <__udivmodsi4_loop>:
 878:	aa 1f       	adc	r26, r26
 87a:	bb 1f       	adc	r27, r27
 87c:	ee 1f       	adc	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	a2 17       	cp	r26, r18
 882:	b3 07       	cpc	r27, r19
 884:	e4 07       	cpc	r30, r20
 886:	f5 07       	cpc	r31, r21
 888:	20 f0       	brcs	.+8      	; 0x892 <__udivmodsi4_ep>
 88a:	a2 1b       	sub	r26, r18
 88c:	b3 0b       	sbc	r27, r19
 88e:	e4 0b       	sbc	r30, r20
 890:	f5 0b       	sbc	r31, r21

00000892 <__udivmodsi4_ep>:
 892:	66 1f       	adc	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	1a 94       	dec	r1
 89c:	69 f7       	brne	.-38     	; 0x878 <__udivmodsi4_loop>
 89e:	60 95       	com	r22
 8a0:	70 95       	com	r23
 8a2:	80 95       	com	r24
 8a4:	90 95       	com	r25
 8a6:	9b 01       	movw	r18, r22
 8a8:	ac 01       	movw	r20, r24
 8aa:	bd 01       	movw	r22, r26
 8ac:	cf 01       	movw	r24, r30
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
